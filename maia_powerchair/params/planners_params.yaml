shutdown_costmaps: false

#How long the controller will wait in seconds without receiving 
#a valid control before space-clearing operations are performed. 
controller_patience: 30.0

#How long the planner will wait in seconds in an attempt to 
#find a valid plan before space-clearing operations are performed.
planner_patience: 5.0

#The rate in Hz at which to run the control loop and send velocity commands to the base. 
controller_frequency: 20.0

#The rate in Hz at which to run the global planning loop. If the frequency is set to 0.0, 
#the global planner will only run when a new goal is received or the local planner reports that its path is blocked. 
planner_frequency: 2

#The distance away from the robot in meters beyond which obstacles will 
#be cleared from the costmap when attempting to clear space in the map. 
#Note, this parameter is only used when the default recovery behaviors are used for move_base. 
conservative_reset_dist: 2.0

#How long in seconds to allow for oscillation before executing 
#recovery behaviors. A value of 0.0 corresponds to an infinite timeout
oscillation_timeout: 5.0

#How far in meters the robot must move to be considered not to be oscillating. 
#Moving this far resets the timer counting up to the ~oscillation_timeout 
oscillation_distance: 0.05

#How many times to allow for planning retries before executing 
#recovery behaviors. A value of -1.0 corresponds to an infinite retries. 
max_planning_retries: 5

clearing_rotation_allowed: false
recovery_behaviour: true

base_global_planner: "navfn/NavfnROS"
#base_local_plabber: "TebLocalPlannerROS"
base_local_planner: "dwa_local_planner/DWAPlannerROS"
#base_local_planner: "base_local_planner/TrajectoryPlannerROS"

NavfnROS:
  planner_window_x: 30.0
  planner_window_y: 30.0
  visualize_potential: true
  allow_unknown: true

TrajectoryPlannerROS:

  max_trans_vel: 0.1
  max_rot_vel: 0.2

  #Set the acceleration limits of the robot
  acc_lim_th: 0.5
  acc_lim_x: 0.5
  acc_lim_y: 0.0

  #Set the velocity limits of the robot
  max_vel_x: 0.1
  min_vel_x: -0.1
  max_vel_theta: 0.2
  min_vel_theta: -0.2
  max_rotational_vel: 0.2
  min_in_place_vel_theta: -0.2

  #The velocity the robot will command when trying to escape from a stuck situation
  escape_vel: -0.1
  holonomic_robot: false
  
  #Set the tolerance on achieving a goal
  xy_goal_tolerance: 0.2
  yaw_goal_tolerance: 0.5

  #Parameters for scoring trajectories
  goal_distance_bias: 0.8
  path_distance_bias: 0.6
  occdist_scale: 0.01
  heading_lookahead: 0.325

  sim_time: 1.0
  sim_granularity: 0.025
  angular_sim_granularity: 0.1
  vx_samples: 3
  vtheta_samples: 20

  #How far the robot must travel before oscillation flags are reset
  oscillation_reset_dist: 0.05
  prune_plan: false

DWAPlannerROS:
  max_vel_trans: 0.2   #0.2
  min_vel_trans: 0.0
  max_vel_x: 0.2       #0.2
  min_vel_x: 0
  max_vel_y: 0.0
  min_vel_y: 0.0
  max_vel_theta: 0.2
  min_vel_theta: 0.0
  acc_lim_x: 2
  acc_lim_y: 0
  acc_lim_theta: 2

  # Goal Tolerance Parametes
  yaw_goal_tolerance: 0.3
  xy_goal_tolerance: 0.5 
  latch_xy_goal_tolerance: true

  # Forward Simulation Parameters
  sim_time: 2
  sim_granularity: 0.025
  vx_samples: 20
  vy_samples: 0
  vth_samples: 50

  # Trajectory Scoring Parameters
  path_distance_bias: 32.0
  goal_distance_bias: 24.0
  occdist_scale: 0.05
  forward_point_distance: 0.325
  stop_time_buffer: 0.2
  scaling_speed: 0.5
  max_scaling_factor: 0.2

  # Oscillation Prevention Parameters
  oscillation_reset_dist: 0.05
  prune_plan: true

recovery_behaviors:
  - name: "super_conservative_reset"
    type: "clear_costmap_recovery/ClearCostmapRecovery"
  - name: "conservative_reset"
    type: "clear_costmap_recovery/ClearCostmapRecovery"
  - name: "aggressive_reset"
    type: "clear_costmap_recovery/ClearCostmapRecovery"

super_conservative_reset:
  reset_distance: 2.5

conservative_reset:
  reset_distance: 2.0

aggressive_reset:
  reset_distance: 1